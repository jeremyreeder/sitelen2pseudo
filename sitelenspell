#!/usr/bin/env python3

import random
import re
from sys import argv, stderr
from typing import Final

morae_memo = {}

def morae(word: str):
	if word not in morae_memo:
		reversed_word = word[::-1]
		reversed_list_of_reversed_morae = re.findall(r'(^n|n?[aeiou][jklmnpstw]?)', reversed_word)
		morae_memo[word] = [reversed_mora[::-1] for reversed_mora in reversed(reversed_list_of_reversed_morae)]
	return morae_memo[word]

def fuzzed(word: str):
	head_found: Final = re.search(r'^.*?[aeiou]n?', word)
	if head_found:
		head = head_found.group(0)
		tail: Final = word[len(head):]
		fuzzy_tail: Final = ''.join(sorted(re.sub(r'[aeiou]+', '', tail)))
		return head + fuzzy_tail
	return word

sitelen: Final = {
	'a'            : '󱤀',
	'akesi'        : '󱤁',
	'ala'          : '󱤂',
	'alasa'        : '󱤃',
	'ale'          : '󱤄',
	'anpa'         : '󱤅',
	'ante'         : '󱤆',
	'anu'          : '󱤇',
	'apeja'        : '󱦡',
	'awen'         : '󱤈',
	'e'            : '󱤉',
	'en'           : '󱤊',
	'epiku'        : '󱦃',
	'esun'         : '󱤋',
	'ijo'          : '󱤌',
	'ike'          : '󱤍',
	'ilo'          : '󱤎',
	'insa'         : '󱤏',
	'jaki'         : '󱤐',
	'jan'          : '󱤑',
	'jasima'       : '󱥿',
	'jelo'         : '󱤒',
	'jo'           : '󱤓',
	'kala'         : '󱤔',
	'kalama'       : '󱤕',
	'kama'         : '󱤖',
	'kasi'         : '󱤗',
	'ken'          : '󱤘',
	'kepeken'      : '󱤙',
	'kijesantakalu': '󱦀',
	'kili'         : '󱤚',
	'kin'          : '󱥹',
	'kipisi'       : '󱥻',
	'kiwen'        : '󱤛',
	'ko'           : '󱤜',
	'kokosili'     : '󱦄',
	'kon'          : '󱤝',
	'ku'           : '󱦈',
	'kule'         : '󱤞',
	'kulupu'       : '󱤟',
	'kute'         : '󱤠',
	'la'           : '󱤡',
	'lanpan'       : '󱦅',
	'lape'         : '󱤢',
	'laso'         : '󱤣',
	'lawa'         : '󱤤',
	'leko'         : '󱥼',
	'len'          : '󱤥',
	'lete'         : '󱤦',
	'li'           : '󱤧',
	'lili'         : '󱤨',
	'linja'        : '󱤩',
	'lipu'         : '󱤪',
	'loje'         : '󱤫',
	'lon'          : '󱤬',
	'luka'         : '󱤭',
	'lukin'        : '󱤮',
	'lupa'         : '󱤯',
	'ma'           : '󱤰',
	'majuna'       : '󱦢',
	'mama'         : '󱤱',
	'mani'         : '󱤲',
	'meli'         : '󱤳',
	'meso'         : '󱦂',
	'mi'           : '󱤴',
	'mije'         : '󱤵',
	'misikeke'     : '󱦇',
	'moku'         : '󱤶',
	'moli'         : '󱤷',
	'monsi'        : '󱤸',
	'monsuta'      : '󱥽',
	'mu'           : '󱤹',
	'mun'          : '󱤺',
	'musi'         : '󱤻',
	'mute'         : '󱤼',
	'n'            : '󱦆',
	'namako'       : '󱥸',
	'nanpa'        : '󱤽',
	'nasa'         : '󱤾',
	'nasin'        : '󱤿',
	'nena'         : '󱥀',
	'ni'           : '󱥁',
	'nimi'         : '󱥂',
	'noka'         : '󱥃',
	'o'            : '󱥄',
	'oko'          : '󱥺',
	'olin'         : '󱥅',
	'ona'          : '󱥆',
	'open'         : '󱥇',
	'pakala'       : '󱥈',
	'pake'         : '󱦠',
	'pali'         : '󱥉',
	'palisa'       : '󱥊',
	'pan'          : '󱥋',
	'pana'         : '󱥌',
	'pi'           : '󱥍',
	'pilin'        : '󱥎',
	'pimeja'       : '󱥏',
	'pini'         : '󱥐',
	'pipi'         : '󱥑',
	'poka'         : '󱥒',
	'poki'         : '󱥓',
	'pona'         : '󱥔',
	'powe'         : '󱦣',
	'pu'           : '󱥕',
	'sama'         : '󱥖',
	'seli'         : '󱥗',
	'selo'         : '󱥘',
	'seme'         : '󱥙',
	'sewi'         : '󱥚',
	'sijelo'       : '󱥛',
	'sike'         : '󱥜',
	'sin'          : '󱥝',
	'sina'         : '󱥞',
	'sinpin'       : '󱥟',
	'sitelen'      : '󱥠',
	'soko'         : '󱦁',
	'sona'         : '󱥡',
	'soweli'       : '󱥢',
	'su'           : '',
	'suli'         : '󱥣',
	'suno'         : '󱥤',
	'supa'         : '󱥥',
	'suwi'         : '󱥦',
	'tan'          : '󱥧',
	'taso'         : '󱥨',
	'tawa'         : '󱥩',
	'telo'         : '󱥪',
	'tenpo'        : '󱥫',
	'toki'         : '󱥬',
	'tomo'         : '󱥭',
	'tonsi'        : '󱥾',
	'tu'           : '󱥮',
	'unpa'         : '󱥯',
	'uta'          : '󱥰',
	'utala'        : '󱥱',
	'walo'         : '󱥲',
	'wan'          : '󱥳',
	'waso'         : '󱥴',
	'wawa'         : '󱥵',
	'weka'         : '󱥶',
	'wile'         : '󱥷'
}

class Cartouche:
	START: Final = '󱦐'
	END  : Final = '󱦑'

toki_words: Final = sitelen.keys()
def shuffled_toki_words():
	return random.sample(list(toki_words), k=len(toki_words))
original_name: Final = argv[1]
if original_name == '':
	print(f'usage: {argv[0]} <Name>', file=stderr)
	exit(1)
toki_consonants: Final = ['j', 'k', 'l', 'm', 'n', 'p', 's', 't', 'w']
toki_vowels: Final = ['a', 'e', 'i', 'o', 'u']
toki_letters: Final = sorted(toki_consonants + toki_vowels)
lowercase_toki_name: Final = ''.join(
	letter for letter in original_name.lower() if letter in toki_letters
)
if len(lowercase_toki_name) < len(original_name):
	print('Error: Name contains forbidden characters.', file=stderr)
	print(f"The only letters in native Toki Pona spellings are {''.join(toki_letters)}.", file=stderr)
	exit(2)
class Bold:
	START: Final = '\033[1m'
	END  : Final = '\033[0m'
print(f'Generating a few Sitelen spellings of "{original_name}"...')
print(f'Initial-phonemic spellings:')
for i in range(3):
	initialphonemic_spelling = []
	print(f'  - {Cartouche.START}', end='')
	for letter in lowercase_toki_name:
		def startswith_letter(word):
			return word.startswith(letter)
		word = next(filter(startswith_letter, shuffled_toki_words()))
		initialphonemic_spelling.append(word)
	for word in initialphonemic_spelling:
		print(sitelen[word], end='')
	print(f'{Cartouche.END} (', end='')
	print(' '.join(Bold.START + word[0] + Bold.END + word[1:] for word in initialphonemic_spelling), end='')
	print(')')
print('Moraic spellings:\n  (not yet implemented)')
print('Fuzzy whole-glyph spellings:')
fuzzy_quota = {
	1: 8,
	2: 16,
	3: 32
}
fuzzed_name = fuzzed(lowercase_toki_name)
found_fuzzy_match = False
for word1 in shuffled_toki_words():
	if fuzzy_quota[1] > 0 and fuzzed(word1) == fuzzed_name:
		found_fuzzy_match = True
		print(f'  - {Cartouche.START}{sitelen[word1]}:{Cartouche.END} ({Bold.START}{word1}{Bold.END})')
		fuzzy_quota[1] -= 1
		fuzzy_quota[2] /= 2
	else:
		for word2 in shuffled_toki_words():
			if fuzzy_quota[2] > 0 and word2 not in toki_vowels:
				if fuzzed(word1 + word2) == fuzzed_name:
					found_fuzzy_match = True
					print(f'  - {Cartouche.START}{sitelen[word1]}:{sitelen[word2]}:{Cartouche.END} ({Bold.START}{word1} {word2}{Bold.END})')
					fuzzy_quota[2] -= 1
					fuzzy_quota[3] /= 2
				else:
					for word3 in shuffled_toki_words():
						if fuzzy_quota[3] > 0 and word3 not in toki_vowels:
							if fuzzed(word1 + word2 + word3) == fuzzed_name:
								found_fuzzy_match = True
								print(f'  - {Cartouche.START}{sitelen[word1]}:{sitelen[word2]}:{sitelen[word3]}:{Cartouche.END} ({Bold.START}{word1} {word2} {word3}{Bold.END})')
								fuzzy_quota[3] -= 1
if not found_fuzzy_match:
	print('  (none found)')
print('Done.')
